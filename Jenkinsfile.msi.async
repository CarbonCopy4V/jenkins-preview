pipeline {
  agent any
  parameters {
    string(name: 'API_URL', defaultValue: 'https://app.signpath.io/api')
    string(name: 'ORGANIZATION_ID', defaultValue: '')
    string(name: 'CI_USER_TOKEN_CREDENTIAL_ID', defaultValue: 'SignPath.CIUserToken')
    string(name: 'TRUSTED_BUILD_SYSTEM_TOKEN_CREDENTIAL_ID', defaultValue: 'SignPath.TrustedBuildSystemToken')
  }
  stages {
    stage('Build') {
      steps {
        echo 'This would build the artifact in build-output/installer.msi'
      }
    }
    stage('Archive') {
      steps {
        archiveArtifacts artifacts: 'build-output/**', fingerprint: true
      }
    }
    stage('Sign with SignPath') {
      steps {
        script {
          signingRequestId = submitSigningRequest( 
            apiUrl: "{params.API_URL}",
            organizationId: "${params.ORGANIZATION_ID}",
            ciUserTokenCredentialId: "${params.CI_USER_TOKEN_CREDENTIAL_ID}", 
            trustedBuildSystemTokenCredentialId: "${params.TRUSTED_BUILD_SYSTEM_TOKEN_CREDENTIAL_ID}",
            projectSlug: "MSI",
            signingPolicySlug: "async-signing",
            inputArtifactPath: "build-output/installer.msi",
            waitForCompletion: false
          )
        }
      }
    }
    stage('Download Signed Artifact') {
      input {
        id "WaitForSigningRequestCompleted"
        message "Has the signing request completed?"
      }
      steps{
        getSignedArtifact(          
          apiUrl: "${params.PI_URL}",
          organizationId: "${params.ORGANIZATION_ID}",
          ciUserTokenCredentialId: "${params.CI_USER_TOKEN_CREDENTIAL_ID}", 
          trustedBuildSystemTokenCredentialId: "${params.TRUSTED_BUILD_SYSTEM_TOKEN_CREDENTIAL_ID}",
          signingRequestId: "${signingRequestId}",
          outputArtifactPath: "build-output/installer.signed.msi"
        )
      }
    }
  }
}
